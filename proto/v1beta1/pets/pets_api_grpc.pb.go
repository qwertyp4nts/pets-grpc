// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/v1beta1/pets/pets_api.proto

package pets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PetsAPIClient is the client API for PetsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetsAPIClient interface {
	GetPet(ctx context.Context, in *GetPetRequest, opts ...grpc.CallOption) (*GetPetResponse, error)
	GetPets(ctx context.Context, in *GetPetsRequest, opts ...grpc.CallOption) (*GetPetsResponse, error)
	AddPet(ctx context.Context, in *AddPetRequest, opts ...grpc.CallOption) (*AddPetResponse, error)
}

type petsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPetsAPIClient(cc grpc.ClientConnInterface) PetsAPIClient {
	return &petsAPIClient{cc}
}

func (c *petsAPIClient) GetPet(ctx context.Context, in *GetPetRequest, opts ...grpc.CallOption) (*GetPetResponse, error) {
	out := new(GetPetResponse)
	err := c.cc.Invoke(ctx, "/pets.PetsAPI/GetPet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petsAPIClient) GetPets(ctx context.Context, in *GetPetsRequest, opts ...grpc.CallOption) (*GetPetsResponse, error) {
	out := new(GetPetsResponse)
	err := c.cc.Invoke(ctx, "/pets.PetsAPI/GetPets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petsAPIClient) AddPet(ctx context.Context, in *AddPetRequest, opts ...grpc.CallOption) (*AddPetResponse, error) {
	out := new(AddPetResponse)
	err := c.cc.Invoke(ctx, "/pets.PetsAPI/AddPet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetsAPIServer is the server API for PetsAPI service.
// All implementations must embed UnimplementedPetsAPIServer
// for forward compatibility
type PetsAPIServer interface {
	GetPet(context.Context, *GetPetRequest) (*GetPetResponse, error)
	GetPets(context.Context, *GetPetsRequest) (*GetPetsResponse, error)
	AddPet(context.Context, *AddPetRequest) (*AddPetResponse, error)
	mustEmbedUnimplementedPetsAPIServer()
}

// UnimplementedPetsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPetsAPIServer struct {
}

func (UnimplementedPetsAPIServer) GetPet(context.Context, *GetPetRequest) (*GetPetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPet not implemented")
}
func (UnimplementedPetsAPIServer) GetPets(context.Context, *GetPetsRequest) (*GetPetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPets not implemented")
}
func (UnimplementedPetsAPIServer) AddPet(context.Context, *AddPetRequest) (*AddPetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPet not implemented")
}
func (UnimplementedPetsAPIServer) mustEmbedUnimplementedPetsAPIServer() {}

// UnsafePetsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetsAPIServer will
// result in compilation errors.
type UnsafePetsAPIServer interface {
	mustEmbedUnimplementedPetsAPIServer()
}

func RegisterPetsAPIServer(s grpc.ServiceRegistrar, srv PetsAPIServer) {
	s.RegisterService(&PetsAPI_ServiceDesc, srv)
}

func _PetsAPI_GetPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetsAPIServer).GetPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pets.PetsAPI/GetPet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetsAPIServer).GetPet(ctx, req.(*GetPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetsAPI_GetPets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetsAPIServer).GetPets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pets.PetsAPI/GetPets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetsAPIServer).GetPets(ctx, req.(*GetPetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetsAPI_AddPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetsAPIServer).AddPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pets.PetsAPI/AddPet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetsAPIServer).AddPet(ctx, req.(*AddPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PetsAPI_ServiceDesc is the grpc.ServiceDesc for PetsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pets.PetsAPI",
	HandlerType: (*PetsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPet",
			Handler:    _PetsAPI_GetPet_Handler,
		},
		{
			MethodName: "GetPets",
			Handler:    _PetsAPI_GetPets_Handler,
		},
		{
			MethodName: "AddPet",
			Handler:    _PetsAPI_AddPet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1beta1/pets/pets_api.proto",
}
